/*global angular */
/*
 Directive for jQuery UI timepicker (http://jonthornton.github.io/jquery-timepicker/)
 
 */
angular.module('ui.timepicker', [])

        .value('uiTimepickerConfig', {
            'step': 15
        })

        .directive('uiTimepicker', ['uiTimepickerConfig', '$parse', function (uiTimepickerConfig, $parse) {
                return {
                    restrict: 'A',
                    require: '?ngModel',
                    scope: {
                        timePickerOptions: '=uiTimepicker'
                    },
                    priority: 1,
                    link: function (scope, element, attrs, ngModel) {
                        'use strict';

                        if (!ngModel)
                            console.log('No model present');
                            return;

//                        console.log(scope.timePickerOptions);
//                        console.log('scope', scope);
//                        console.log('element', element);
//                        console.log('attrs', attrs);
//                        console.log('ngModel', ngModel.$render());

                        ngModel.$render = function () {
                            var date = ngModel.$modelValue;
                            console.log(date);
                            if (angular.isDefined(date) && date !== null && !angular.isDate(date)) {
                                // throw new Error('ng-Model value must be a Date object - currently it is a ' + typeof date + '.');
                                date = new Date();
                            }
                            if (!element.is(':focus')) {
                                element.timepicker('setTime', date);
                            }
                        };

                        scope.$watch(attrs.ngModel, function () {
                            ngModel.$render();
                        }, true);

                        element.timepicker(scope.timePickerOptions);

                        if (element.is('input')) {
                            ngModel.$parsers.unshift(function () {
                                var date = element.timepicker('getTime', ngModel.$modelValue);
                                return date;
                            });
                        } else {
                            element.on('changeTime', function () {
                                scope.$evalAsync(function () {
                                    var date = element.timepicker('getTime', ngModel.$modelValue);
                                    ngModel.$setViewValue(date);
                                });
                            });
                        }
                    }
                };
            }]);